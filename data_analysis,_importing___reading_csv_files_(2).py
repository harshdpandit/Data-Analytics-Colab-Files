# -*- coding: utf-8 -*-
"""Data_Analysis,_Importing___Reading_csv_Files (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ywMe4PLx_UXndY8qv6YqaNNapwRnIaD4
"""

import csv
with open('albumlist.csv', 'r') as csvfile:
    reader = csv.DictReader(csvfile)

    print(type(reader))
    print(reader.fieldnames)

with open('albumlist.csv', 'r') as csvfile:
    reader = csv.DictReader(csvfile)

    for row in reader:
        print(row)

with open('albumlist.csv', 'r') as csvfile:
    reader = csv.DictReader(csvfile)

    rows = 101
    for row in reader:
        rows -= 1
        if (rows > 0):
            print(row)
        else:
            break

with open('albumlist.csv', 'r') as csvfile:
    reader = csv.DictReader(csvfile)

    albums = []
    for row in reader:
        albums.append(row)

    print("number albums: ", len(albums))

albums_1974 = [row for row in albums if row["Year"] == "1974"]
print("number of albums in 1974:", len(albums_1974))

for album in albums_1974:
    print(album["Album"], "by", album["Artist"])

print([row for row in albums if album["Year"] == "1974"][:10])

rock_albums = [row for row in albums if(row["Genre"] == "Rock"
                and ("Pop Rock" in row["Subgenre"] or "Fusion" in row["Subgenre"]))
              ]

for album in rock_albums:
    print(album["Album"], album["Artist"], album["Genre"], album["Subgenre"])

release_years = [int(row["Year"]) for row in albums if row["Year"]]

def is_valid_year(string):

    try:
        year = int(string) #try casting given string to int

    except ValueError:

        return False #return False if a ValueError is generated

    else:

        return year > 1400 #return the year itself, if it's greater than 1400

release_years = [int(row["Year"]) for row in albums if(is_valid_year(row["Year"]))]
print(release_years)

min_release_date = min(release_years)
print(min_release_date)

albums_sorted = sorted(albums, key = lambda x: x["Artist"])

valid_albums = [row for row in albums if (is_valid_year(row["Year"]))]
album_max = max(valid_albums, key = lambda x: x["Year"])
print(album_max["Album"], album_max["Artist"], album_max["Year"])